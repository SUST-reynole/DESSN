import torch.nn as nn
import torch
from modules import DE, SSA, ADCG

class DESSN(nn.Module): #terminal module 最终的模块
    def __init__(self, in_ch, out_ch):
        super(DESSN, self).__init__()
        self.att1 = DE(64)
        self.att2 = DE(128)
        self.att3 = DE(256)
        self.att4 = DE(512)
        self.att5 = DE(1024)
        self.att = SSA(2048)

        self.conv1 = ADCG(in_ch, 64)
        self.pool1 = nn.MaxPool2d(2)
        self.drop1 = nn.Dropout2d(0.1)
        self.conv2 = ADCG(64, 128)
        self.pool2 = nn.MaxPool2d(2)
        self.drop2 = nn.Dropout2d(0.1)
        self.conv3 = ADCG(128, 256)
        self.pool3 = nn.MaxPool2d(2)
        self.drop3 = nn.Dropout2d(0.2)
        self.conv4 = ADCG(256, 512)
        self.pool4 = nn.MaxPool2d(2)
        self.drop4 = nn.Dropout2d(0.2)
        self.conv5 = ADCG(512, 1024)
        self.drop5 = nn.Dropout2d(0.3)
        self.up6 = nn.ConvTranspose2d(2048, 1024, 2, stride=2)
        self.conv6 = ADCG(1536, 512)
        self.drop6 = nn.Dropout2d(0.2)
        self.up7 = nn.ConvTranspose2d(512, 256, 2, stride=2)
        self.conv7 = ADCG(512, 256)
        self.drop7 = nn.Dropout2d(0.2)
        self.up8 = nn.ConvTranspose2d(256, 128, 2, stride=2)
        self.conv8 = ADCG(256, 128)
        self.drop8 = nn.Dropout2d(0.1)
        self.up9 = nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.conv9 = ADCG(128, 64)
        self.drop9 = nn.Dropout2d(0.1)
        self.conv10 = nn.Conv2d(64, out_ch, 1)

    def forward(self, x1, x2):
        c1_1 = self.conv1(x1)
        c1_2 = self.conv1(x2)
        c1_1, c1_2, c1 = self.att1(c1_1, c1_2)

        p1_1 = self.pool1(c1_1)
        p1_2 = self.pool1(c1_2)
        d1_1 = self.drop1(p1_1)
        d1_2 = self.drop1(p1_2)
        c2_1 = self.conv2(d1_1)
        c2_2 = self.conv2(d1_2)
        c2_1, c2_2, c2 = self.att2(c2_1, c2_2)

        p2_1 = self.pool1(c2_1)
        p2_2 = self.pool1(c2_2)
        d2_1 = self.drop1(p2_1)
        d2_2 = self.drop2(p2_2)
        c3_1 = self.conv3(d2_1)
        c3_2 = self.conv3(d2_2)
        c3_1, c3_2, c3 = self.att3(c3_1, c3_2)

        p3_1 = self.pool3(c3_1)
        p3_2 = self.pool3(c3_2)
        d3_1 = self.drop3(p3_1)
        d3_2 = self.drop3(p3_2)
        c4_1 = self.conv4(d3_1)
        c4_2 = self.conv4(d3_2)
        c4_1, c4_2, c4 = self.att4(c4_1, c4_2)

        p4_1 = self.pool4(c4_1)
        p4_2 = self.pool4(c4_2)
        d4_1 = self.drop4(p4_1)
        d4_2 = self.drop4(p4_2)
        c5_1 = self.conv5(d4_1)
        c5_2 = self.conv5(d4_2)
        c5_1, c5_2, c5 = self.att5(c5_1, c5_2)
        C5 = torch.cat((c5_1, c5_2), dim=1)

        C5 = self.att(C5)

        d5 = self.drop5(C5)
        up_6 = self.up6(d5) #1024
        merge6 = torch.cat([up_6, c4], dim=1) #1024+512=1536
        c6 = self.conv6(merge6)
        d6 = self.drop6(c6)
        up_7 = self.up7(d6)
        merge7 = torch.cat([up_7, c3], dim=1)
        c7 = self.conv7(merge7)
        d7 = self.drop7(c7)
        up_8 = self.up8(d7)
        merge8 = torch.cat([up_8, c2], dim=1)
        c8 = self.conv8(merge8)
        d8 = self.drop8(c8)
        up_9 = self.up9(d8)
        merge9 = torch.cat([up_9, c1], dim=1)
        c9 = self.conv9(merge9)
        d9 = self.drop9(c9)
        c10 = self.conv10(d9)
        out = nn.Sigmoid()(c10)
        return out